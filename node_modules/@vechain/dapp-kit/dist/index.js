import{DriverNoVendor as me,SimpleNet as Ce}from"@vechain/connex-driver/dist/index.js";import{Framework as we}from"@vechain/connex-framework";import*as Z from"thor-devkit";import*as j from"thor-devkit";import{proxy as X,subscribe as ue}from"valtio/vanilla";import{subscribeKey as ge}from"valtio/vanilla/utils";var m={NONE:0,ERROR:1,WARN:2,INFO:3,DEBUG:4},h=m.NONE,i={configure(n){h=m[n]},debug(n,e,...t){h>=m.DEBUG&&console.log(`[${n}] (${e})`,...t)},info(n,e,...t){h>=m.INFO&&console.info(`[${n}] (${e})`,...t)},warn(n,e,...t){h>=m.WARN&&console.warn(`[${n}] (${e})`,...t)},error(n,e,...t){h>=m.ERROR&&console.error(`[${n}] (${e})`,...t)}};var O=n=>({signTx:(e,t)=>{let o=n.sign("tx",e);return t.gas&&o.gas(t.gas),t.signer&&o.signer(t.signer),t.dependsOn&&o.dependsOn(t.dependsOn),t.link&&o.link(t.link),t.comment&&o.comment(t.comment),t.delegator&&o.delegate(t.delegator.url,t.delegator.signer),t.onAccepted&&o.accepted(t.onAccepted),i.debug("vendor","signTx",{messages:e.length,options:t}),o.request()},signCert:(e,t)=>{let o=n.sign("cert",e);return t.signer&&o.signer(t.signer),t.link&&o.link(t.link),t.onAccepted&&o.accepted(t.onAccepted),i.debug("vendor","signCert",{message:e,options:t}),o.request()}});var M="dappkit@vechain",k=`${M}/source`,A=`${M}/account`,D=`${M}/connectionCertificate`,ne=n=>{i.debug("LocalStorage","setSource",n),n?localStorage.setItem(k,n):localStorage.removeItem(k)},oe=n=>{i.debug("LocalStorage","setAccount",n),n?localStorage.setItem(A,n):localStorage.removeItem(A)},re=n=>{i.debug("LocalStorage","setConnectionCertificate",n),n?localStorage.setItem(D,JSON.stringify(n)):localStorage.removeItem(D)},se=()=>{let n=localStorage.getItem(k);return n||null},ie=()=>{let n=localStorage.getItem(A);return n||null},ce=()=>{let n=localStorage.getItem(D);return n?JSON.parse(n):null},u={setAccount:oe,setSource:ne,setConnectionCertificate:re,getAccount:ie,getSource:se,getConnectionCertificate:ce};var T={purpose:"identification",payload:{type:"text",content:`The following dApp would like to see your public address: ${typeof window<"u"?window.origin:""}`}};var x={main:{number:0,id:"0x00000000851caf3cfdb6e899cf5958bfb1ac3413d346d43539627e6be7ec1b4a",size:170,parentID:"0xffffffff53616c757465202620526573706563742c20457468657265756d2100",timestamp:1530316800,gasLimit:1e7,beneficiary:"0x0000000000000000000000000000000000000000",gasUsed:0,totalScore:0,txsRoot:"0x45b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0",txsFeatures:0,stateRoot:"0x09bfdf9e24dd5cd5b63f3c1b5d58b97ff02ca0490214a021ed7d99b93867839c",receiptsRoot:"0x45b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0",signer:"0x0000000000000000000000000000000000000000",isTrunk:!0,transactions:[]},test:{number:0,id:"0x000000000b2bce3c70bc649a02749e8687721b09ed2e15997f466536b20bb127",size:170,parentID:"0xffffffff00000000000000000000000000000000000000000000000000000000",timestamp:1530014400,gasLimit:1e7,beneficiary:"0x0000000000000000000000000000000000000000",gasUsed:0,totalScore:0,txsRoot:"0x45b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0",txsFeatures:0,stateRoot:"0x4ec3af0acbad1ae467ad569337d2fe8576fe303928d35b8cdd91de47e9ac84bb",receiptsRoot:"0x45b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0",signer:"0x0000000000000000000000000000000000000000",isTrunk:!0,transactions:[]}};var L={requiresCertificate:!0},F={"wallet-connect":{requiresCertificate:!1},veworld:L,sync2:L,sync:L},N=Object.keys(F);Object.freeze(F);Object.freeze(N);var V=(t=>(t.RequestTransaction="thor_sendTransaction",t.SignCertificate="thor_signCertificate",t))(V||{});var K=n=>n?n==="main"||n==="test"?x[n].id:n.id:x.main.id,U=n=>n?n==="main"||n==="test"?x[n]:n:x.main;import*as P from"@vechain/connex";import*as $ from"thor-devkit";var C=class{constructor(e,t){this.wallet=e;this.connectionCertificateData=t;this.connect=async()=>{let e=this.connectionCertificateData?.message||T,t=this.connectionCertificateData?.options||{},{annex:{domain:o,signer:c,timestamp:r},signature:l}=await this.signCert(e,t),p={...e,signature:l,signer:c,domain:o,timestamp:r};try{return $.Certificate.verify(p),{account:c,verified:!0,connectionCertificate:p}}catch{return{account:c,verified:!1}}};this.signCert=(e,t)=>this.wallet.signCert(e,t);this.signTx=(e,t)=>this.wallet.signTx(e,t);this.disconnect=async()=>this.wallet.disconnect?.()}};var W=class{constructor(e){this.signer=e;this.connect=async()=>({account:await this.signer.connect(),verified:!1});this.signCert=(e,t)=>this.signer.signCert(e,t);this.signTx=(e,t)=>this.signer.signTx(e,t);this.disconnect=()=>this.signer.disconnect()}};import{SignClient as ae}from"@walletconnect/sign-client";var q={},G=({projectId:n,metadata:e})=>{let t=q[n];if(t)return t;let o=ae.init({projectId:n,metadata:e}),c={get:async()=>{try{return await o}catch{throw new Error("Failed to initialise the wallet connect sign client")}}};return q[n]=c,c};import{WalletConnectModal as le}from"@walletconnect/modal";var B={},de=["0x00000000851caf3cfdb6e899cf5958bfb1ac3413d346d43539627e6be7ec1b4a","0x000000000b2bce3c70bc649a02749e8687721b09ed2e15997f466536b20bb127"],pe=de.map(n=>`vechain:${n.slice(-32)}`),z=n=>{let e=B[n];if(e)return e;let t=new le({projectId:n,explorerRecommendedWalletIds:"NONE",mobileWallets:[{name:"VeWorld",id:"veworld-mobile",links:{native:"veworld://org.vechain.veworld.app/",universal:"https://veworld.com"}}],chains:pe,themeVariables:{"--wcm-z-index":"99999999"},walletImages:{"veworld-mobile":"https://www.veworld.net/assets/logo/logo.svg"}});return B[n]=t,t};import{getSdkError as fe}from"@walletconnect/utils";var J=({genesisId:n,wcClient:e,web3Modal:t,onDisconnected:o})=>{let c=`vechain:${n.slice(-32)}`,r;e.get().then(s=>{l(s),p(s)}).catch(()=>{throw new Error("Failed to get the wallet connect sign client")});let l=s=>{s.on("session_update",({topic:a,params:d})=>{i.debug("wallet connect signer","session_update",{topic:a,params:d});let{namespaces:f}=d;r={...s.session.get(a),namespaces:f}}),s.on("session_delete",()=>{o(),_().catch(()=>{throw new Error("Failed to disconnect")})})},p=s=>{if(typeof r<"u")return;i.debug("wallet connect signer","restore session");let a=s.session.keys;for(let d of a){let f=s.session.get(d),b=f.namespaces.vechain.accounts;for(let y of b)if(y.split(":")[1]===n.slice(-32)){r=f;return}}},w=s=>{if(!r)return;i.debug("wallet connect signer","validate session");let a=r.namespaces.vechain.accounts[0],d=a.split(":")[2],f=a.split(":")[1];if(f===n.slice(-32)&&!(s&&s.toLowerCase()!==d.toLowerCase()))return{address:d,networkIdentifier:f,topic:r.topic}},v=async()=>{i.debug("wallet connect signer","connect");let s=await e.get(),a={methods:Object.values(V),chains:[c],events:[]};try{let d={vechain:a},f=await s.connect({requiredNamespaces:d});return f.uri&&await t.openModal({uri:f.uri}),await new Promise((b,y)=>{let I=t.subscribeModal(g=>{g.open||(y(new Error("User closed modal while connecting")),I())});f.approval().then(g=>{r=g,I(),b(g)}).catch(g=>{t.closeModal(),y(g)})})}catch{throw new Error("wc connect failed")}},R=async s=>{let a=w(s);return a?a.topic:(await v()).topic},S=async(s,a)=>{let d=await R(a);return(await e.get()).request({topic:d,chainId:c,request:s})},ee=async(s,a)=>S({method:"thor_sendTransaction",params:[{message:s,options:a}]}),te=async(s,a)=>S({method:"thor_signCertificate",params:[{message:s,options:a}]}),_=async()=>{if(!r)return;let s=r.topic;r=void 0;let a=await e.get();try{await a.disconnect({topic:s,reason:fe("USER_DISCONNECTED")})}catch{throw new Error("SignClient.disconnect failed")}};return{signTx:ee,signCert:te,disconnect:_,genesisId:n,connect:async()=>{r||(r=await v());let s=r.namespaces.vechain;if(!s)throw new Error("Failed to create a vechain session with wallet connect");let a=s.accounts[0];try{return a.split(":")[2]}catch{throw new Error("Failed to get account from session")}}}};var Y=({source:n,genesis:e,walletConnectOptions:t,onDisconnected:o,connectionCertificate:c})=>{let r=K(e);switch(i.debug("createWallet",n),n){case"sync":{if(!window.connex)throw new Error("User is not in a Sync wallet");let l=new P.Connex.Vendor(r,"sync");return new C(O(l),c)}case"sync2":{let l=new P.Connex.Vendor(r,"sync2");return new C(O(l),c)}case"veworld":{if(!window.vechain)throw new Error("VeWorld Extension is not installed");let l=window.vechain.newConnexSigner(r);return new C(l,c)}case"wallet-connect":{if(!t)throw new Error("WalletConnect options are not provided");let{projectId:l,metadata:p,modal:w}=t,v=G({projectId:l,metadata:p}),R=w??z(l),S=J({genesisId:r,wcClient:v,web3Modal:R,onDisconnected:o});return new W(S)}}};var E=class{constructor(e){this.options=e;this.wallets={};this.signConnectionCertificate=async()=>{let e=this.options.connectionCertificate?.message||T,t=this.options.connectionCertificate?.options||{},{annex:{domain:o,signer:c,timestamp:r},signature:l}=await this.wallet.signCert(e,t),p={...e,signature:l,signer:c,domain:o,timestamp:r};try{return j.Certificate.verify(p),this.state.address=c,this.state.connectionCertificate=p,{account:c,verified:!0,connectionCertificate:p}}catch{return{account:c,verified:!1}}finally{this.options.walletConnectOptions?.modal?.onConnectionCertificateSigned?.()}};this.connect=()=>this.wallet.connect().then(e=>(this.state.source==="wallet-connect"&&this.options.requireCertificate&&this.options.walletConnectOptions?.modal?.askForConnectionCertificate?this.options.walletConnectOptions.modal.askForConnectionCertificate():(this.state.address=e.account,this.state.connectionCertificate=e.connectionCertificate??null),e)).catch(e=>{throw i.error("WalletManager","connect",e),e});this.disconnect=(e=!1)=>{if(!this.state.source){this.state.source=null,this.state.address=null,this.state.connectionCertificate=null;return}i.debug("WalletManager","disconnect","current source",this.state.source);let t=this.wallets[this.state.source];if(t&&!e&&t.disconnect){let o=t.disconnect();o instanceof Promise&&o.catch(c=>{i.error("WalletManager","disconnect",c)})}this.state.source=null,this.state.address=null,this.state.connectionCertificate=null};this.signTx=(e,t)=>this.wallet.signTx(e,t).then(o=>(this.state.address=o.signer,o)).catch(o=>{throw i.error("WalletManager","signTx",o),o});this.signCert=(e,t)=>this.wallet.signCert(e,t).then(o=>(this.state.address=o.annex.signer,o)).catch(o=>{throw i.error("WalletManager","signCert",o),o});this.setSource=e=>{if(this.state.source!==e){if(this.state.source&&this.state.source!==e&&this.disconnect(),e==="wallet-connect"&&!this.options.walletConnectOptions)throw new Error("WalletConnect options are not provided");if(e==="veworld"&&!window.vechain)throw new Error("VeWorld Extension is not installed");if(e==="sync"&&!window.connex)throw new Error("User is not in a Sync wallet");i.debug("WalletManager","setSource",e),this.disconnect(),this.state.source=e}};this.subscribe=e=>ue(this.state,()=>{e(this.state)});this.subscribeToKey=(e,t)=>ge(this.state,e,o=>{t(o)});this.initState=e=>{let t=this.getAvailableSources();if(!e)return X({source:null,address:null,availableSources:t,connectionCertificate:null});let o=u.getAccount(),c=u.getSource(),r=u.getConnectionCertificate();return X({source:c,address:o,availableSources:t,connectionCertificate:r})};this.initPersistence=e=>{e&&(this.subscribeToKey("address",u.setAccount),this.subscribeToKey("source",u.setSource),this.subscribeToKey("connectionCertificate",u.setConnectionCertificate))};this.getAvailableSources=()=>{let e=[];return e.push("veworld"),this.options.walletConnectOptions&&e.push("wallet-connect"),e.push("sync2"),window.connex&&e.push("sync"),e};this.setFirstDetectedSource=()=>{window.vechain?this.setSource("veworld"):this.options.walletConnectOptions?this.setSource("wallet-connect"):window.connex?this.setSource("sync"):this.setSource("sync2")};this.state=this.initState(e.usePersistence??!1),this.initPersistence(e.usePersistence??!1),i.debug("WalletManager","constructor",this.state),window.vechain?.isInAppBrowser===!0?this.setSource("veworld"):e.useFirstDetectedSource&&this.setFirstDetectedSource()}get wallet(){let e=this.state.source;if(i.debug("WalletManager","get wallet","current source",e),!e)throw new Error("No wallet has been selected");let t=this.wallets[e];if(!t){if(!N.includes(e))throw new Error(`No wallet found for: ${e}`);i.debug("WalletManager","get wallet","creating a new wallet",e);let o={...this.options,source:e,onDisconnected:()=>this.disconnect(!0)};t=Y(o),this.wallets[e]=t}return t}};var H={},he=(n,e)=>{let t=Z.blake2b256(JSON.stringify({node:n,genesis:e})).toString("hex"),o=H[t];return o||(o=new me(new Ce(n),e),H[t]=o),o},Q=class{constructor(e){e.logLevel&&(i.configure(e.logLevel),i.debug("DAppKit","constructor",e));let{nodeUrl:t,genesis:o}=e,c=U(o),r=he(t,c),l=new E(e);r.signTx=l.signTx.bind(l),r.signCert=l.signCert.bind(l);let p=new we(r);this.thor=p.thor,this.vendor=p.vendor,this.wallet=l}};export{C as CertificateBasedWallet,Q as DAppKit,i as DAppKitLogger,T as DEFAULT_CONNECT_CERT_MESSAGE,V as DefaultMethods,u as Storage,W as WCWallet,E as WalletManager,F as WalletMapping,N as WalletSources,O as convertVendorToSigner,Y as createWallet,G as createWcClient,z as createWcModal,J as createWcSigner,x as genesisBlocks,U as normalizeGenesisBlock,K as normalizeGenesisId};
//# sourceMappingURL=index.js.map