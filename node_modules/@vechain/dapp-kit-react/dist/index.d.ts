import React from 'react';
import * as ThorDevkit from 'thor-devkit';
import { WalletSource, ConnectResponse } from '@vechain/dapp-kit';
export { DAppKitOptions, WalletConnectOptions } from '@vechain/dapp-kit';
import { DAppKitUIOptions, Button } from '@vechain/dapp-kit-ui';
export { DAppKitUIOptions } from '@vechain/dapp-kit-ui';
import * as _lit_react from '@lit/react';

interface AccountState {
    address: string | null;
    source: WalletSource | null;
}
/**
 * Connex Provider Options
 * @param children - React children
 */
type DAppKitProviderOptions = DAppKitUIOptions & {
    children: React.ReactNode;
};
/**
 * Connex Context
 * This context is used to provide the Connex instance and the Connex Vendor instance
 * to the application.
 */
interface DAppKitContext {
    connex: {
        thor: Connex.Thor;
        vendor: Connex.Vendor;
    };
    wallet: {
        setSource: (source: WalletSource) => void;
        availableWallets: WalletSource[];
        disconnect: () => void;
        connect: () => Promise<ConnectResponse>;
        account: string | null;
        source: WalletSource | null;
        connectionCertificate: ThorDevkit.Certificate | null;
    };
    modal: {
        open: () => void;
        close: () => void;
        onConnectionStatusChange: (callback: (address: string | null) => void) => void;
    };
}

declare const DAppKitProvider: React.FC<DAppKitProviderOptions>;
declare const useConnex: () => DAppKitContext['connex'];
declare const useWallet: () => DAppKitContext['wallet'];
declare const useWalletModal: () => DAppKitContext['modal'];

declare const WalletButton: _lit_react.ReactWebComponent<Button, {}>;

export { AccountState, DAppKitContext, DAppKitProvider, DAppKitProviderOptions, WalletButton, useConnex, useWallet, useWalletModal };
