{"version":3,"sources":["../src/DAppKitProvider.tsx","../src/WalletButton.tsx"],"sourcesContent":["import React, {\n    createContext,\n    useCallback,\n    useContext,\n    useEffect,\n    useMemo,\n    useState,\n} from 'react';\nimport type { WalletSource } from '@vechain/dapp-kit';\nimport { DAppKitUI } from '@vechain/dapp-kit-ui';\nimport { subscribeKey } from 'valtio/vanilla/utils';\nimport type { DAppKitProviderOptions, DAppKitContext } from './types';\nimport * as ThorDevkit from 'thor-devkit';\n\n/**\n * Context\n */\nconst Context = createContext<DAppKitContext | undefined>(undefined);\n\nexport const DAppKitProvider: React.FC<DAppKitProviderOptions> = ({\n    children,\n    nodeUrl,\n    genesis,\n    walletConnectOptions,\n    usePersistence = false,\n    logLevel,\n    requireCertificate,\n    themeMode,\n    themeVariables,\n    i18n,\n    language,\n    modalParent,\n    onSourceClick,\n    connectionCertificate: connectionCertificateData,\n}): React.ReactElement => {\n    const connex = useMemo(\n        () =>\n            DAppKitUI.configure({\n                nodeUrl,\n                genesis,\n                walletConnectOptions,\n                usePersistence,\n                logLevel,\n                requireCertificate,\n                themeVariables,\n                themeMode,\n                i18n,\n                language,\n                modalParent,\n                onSourceClick,\n                connectionCertificate: connectionCertificateData,\n            }),\n        [\n            nodeUrl,\n            genesis,\n            walletConnectOptions,\n            usePersistence,\n            logLevel,\n            requireCertificate,\n            themeVariables,\n            themeMode,\n            i18n,\n            language,\n            modalParent,\n            onSourceClick,\n            connectionCertificateData,\n        ],\n    );\n\n    const [account, setAccount] = useState<string | null>(\n        connex.wallet.state.address,\n    );\n    const [source, setSource] = useState<WalletSource | null>(\n        connex.wallet.state.source,\n    );\n    const [connectionCertificate, setConnectionCertificate] =\n        useState<ThorDevkit.Certificate | null>(\n            connex.wallet.state.connectionCertificate,\n        );\n\n    useEffect(() => {\n        const addressSub = subscribeKey(connex.wallet.state, 'address', (v) => {\n            setAccount(v);\n        });\n        const sourceSub = subscribeKey(connex.wallet.state, 'source', (v) => {\n            setSource(v);\n        });\n        const certificateSub = subscribeKey(\n            connex.wallet.state,\n            'connectionCertificate',\n            (v) => {\n                setConnectionCertificate(v);\n            },\n        );\n\n        return () => {\n            addressSub();\n            sourceSub();\n            certificateSub();\n        };\n    }, [connex.wallet.state]);\n\n    const openModal = useCallback(() => {\n        DAppKitUI.modal.open();\n    }, []);\n\n    const closeModal = useCallback(() => {\n        DAppKitUI.modal.close();\n    }, []);\n    const onModalConnected = useCallback(\n        (callback: (address: string | null) => void) =>\n            DAppKitUI.modal.onConnectionStatusChange(callback),\n        [],\n    );\n\n    const context: DAppKitContext = useMemo(() => {\n        return {\n            connex: {\n                thor: connex.thor,\n                vendor: connex.vendor,\n            },\n            wallet: {\n                setSource: connex.wallet.setSource,\n                disconnect: connex.wallet.disconnect,\n                connect: connex.wallet.connect,\n                availableWallets: connex.wallet.state.availableSources,\n                account,\n                source,\n                connectionCertificate,\n            },\n            modal: {\n                open: openModal,\n                close: closeModal,\n                onConnectionStatusChange: onModalConnected,\n            },\n        };\n    }, [\n        connex,\n        account,\n        source,\n        closeModal,\n        openModal,\n        onModalConnected,\n        connectionCertificate,\n    ]);\n\n    return <Context.Provider value={context}>{children}</Context.Provider>;\n};\n\nexport const useConnex = (): DAppKitContext['connex'] => {\n    const context = useContext(Context);\n\n    if (!context) {\n        throw new Error('\"useConnex\" must be used within a ConnexProvider');\n    }\n\n    return context.connex;\n};\n\nexport const useWallet = (): DAppKitContext['wallet'] => {\n    const context = useContext(Context);\n\n    if (!context) {\n        throw new Error('\"useWallet\" must be used within a ConnexProvider');\n    }\n\n    return context.wallet;\n};\n\nexport const useWalletModal = (): DAppKitContext['modal'] => {\n    const context = useContext(Context);\n\n    if (!context) {\n        throw new Error(\n            '\"useWalletModal\" must be used within a ConnexProvider',\n        );\n    }\n    return context.modal;\n};\n","import React from 'react';\nimport { Button as ButtonVanilla } from '@vechain/dapp-kit-ui';\nimport { createComponent } from '@lit/react';\n\nexport const WalletButton = createComponent({\n    tagName: 'vdk-button',\n    elementClass: ButtonVanilla,\n    react: React,\n});\n"],"mappings":"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","names":["createContext","useCallback","useContext","useEffect","useMemo","useState","DAppKitUI","subscribeKey","jsx","Context","DAppKitProvider","children","nodeUrl","genesis","walletConnectOptions","usePersistence","logLevel","requireCertificate","themeMode","themeVariables","i18n","language","modalParent","onSourceClick","connectionCertificateData","connex","account","setAccount","source","setSource","connectionCertificate","setConnectionCertificate","addressSub","v","sourceSub","certificateSub","openModal","closeModal","onModalConnected","callback","context","useConnex","useWallet","useWalletModal","React","ButtonVanilla","createComponent","WalletButton"]}