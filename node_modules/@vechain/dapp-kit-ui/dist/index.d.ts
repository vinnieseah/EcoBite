import { WalletManager, WalletSource, WCModal, OpenOptions, SubscribeModalState, DAppKitOptions, DAppKit } from '@vechain/dapp-kit';
import * as lit from 'lit';
import { TemplateResult, LitElement, PropertyValues, nothing } from 'lit';

interface ConnectModalManagerOptions {
    modalParent?: HTMLElement;
}
declare class ConnectModalManager {
    private walletManager;
    private static instance;
    private constructor();
    static getInstance(walletManager: WalletManager, options?: ConnectModalManagerOptions): ConnectModalManager;
    open(): void;
    close(): void;
    closeWalletConnect(): void;
    closeConnectionCertificateRequest(): void;
    onConnectionStatusChange(callback: (address: string | null) => void): () => void;
    onWalletSelected(callback: (source: WalletSource | null) => void): () => void;
}

declare class CustomWalletConnectModal implements WCModal {
    private static instance;
    private eventEmitter;
    private constructor();
    static getInstance(): CustomWalletConnectModal;
    /**
     * WalletConnect
     */
    openModal(options: OpenOptions): Promise<void>;
    closeModal(): void;
    askForConnectionCertificate(): void;
    onConnectionCertificateSigned(): void;
    subscribeModal(callback: (newState: SubscribeModalState) => void): () => void;
    private updateModalState;
}

declare const QrCodeUtil: {
    generate({ uri, size, logoSize, dotColor, edgeColor, }: {
        uri: string;
        size: number;
        logoSize: number;
        dotColor: string;
        edgeColor: string;
    }): TemplateResult[];
};

declare const addResizeListeners: (callback: () => void) => void;

declare const Colors: {
    WalletConnectBlue: lit.CSSResult;
    Dark: {
        Primary: lit.CSSResult;
        PrimaryHover: lit.CSSResult;
        PrimaryActive: lit.CSSResult;
        Secondary: lit.CSSResult;
        Tertiary: lit.CSSResult;
        Quaternary: lit.CSSResult;
    };
    Light: {
        Primary: lit.CSSResult;
        PrimaryHover: lit.CSSResult;
        PrimaryActive: lit.CSSResult;
        Secondary: lit.CSSResult;
        Tertiary: lit.CSSResult;
        Quaternary: lit.CSSResult;
    };
};

interface SourceInfo {
    id: WalletSource;
    name: string;
    logo: string;
}
declare const WalletSources: Record<WalletSource, SourceInfo>;

declare const Breakpoint: {
    Mobile: number;
    Tablet: number;
};

type ThemeMode = 'LIGHT' | 'DARK';

declare const IOS_STORE_URL = "https://apps.apple.com/it/app/veworld/id6446854569";
declare const ANDROID_STORE_URL = "https://play.google.com/store/apps/details?id=org.vechain.veworld.app";

declare const Inter: lit.CSSResult;
declare const Font: {
    Family: lit.CSSResult;
    Size: {
        Medium: lit.CSSResult;
        Large: lit.CSSResult;
    };
    Weight: {
        Medium: lit.CSSResult;
    };
};

type I18n = Record<string, Record<string, string>>;
declare const defaultI18n: I18n;

declare const modalZIndex = 100;

declare const VEWORLD_WEBSITE = "https://www.veworld.com/discover/browser/ul/";

type EventTypes = 'vdk-dapp-kit-configured' | 'vdk-request-connection-certificate' | 'vdk-close-connection-certificate-request' | 'vdk-open-wc-qrcode' | 'vdk-close-wc-qrcode' | 'vdk-open-wallet-modal' | 'vdk-close-wallet-modal';
type ThemeOptions = undefined | {
    theme?: ThemeMode;
};
interface EventArgs {
    'vdk-dapp-kit-configured': undefined;
    'vdk-request-connection-certificate': undefined;
    'vdk-close-connection-certificate-request': undefined;
    'vdk-close-wc-qrcode': undefined;
    'vdk-open-wc-qrcode': OpenOptions & ThemeOptions;
    'vdk-open-wallet-modal': ThemeOptions;
    'vdk-close-wallet-modal': undefined;
}
declare const dispatchCustomEvent: <T extends EventTypes>(type: T, detail?: EventArgs[T] | undefined) => void;
declare const subscribeToCustomEvent: <T extends EventTypes>(type: T, callback?: ((detail: EventArgs[T]) => void) | undefined) => (() => void);

declare const isMobile: () => boolean;
declare const isAndroid: () => boolean;

declare const useTranslate: (i18n: I18n, language: string) => (s: string) => string;

declare const getPicassoImage: (address: string, base64?: boolean) => string;
declare const friendlyAddress: (address: string, lengthBefore?: number, lengthAfter?: number) => string;

declare const createModalIfNotPresent: (options?: {
    modalParent?: HTMLElement;
}) => HTMLElement;
declare const ThemeVariables: {
    '--vdk-color-dark-primary': string;
    '--vdk-color-dark-primary-hover': string;
    '--vdk-color-dark-primary-active': string;
    '--vdk-color-dark-secondary': string;
    '--vdk-color-dark-tertiary': string;
    '--vdk-color-dark-quaternary': string;
    '--vdk-color-light-primary': string;
    '--vdk-color-light-primary-hover': string;
    '--vdk-color-light-primary-active': string;
    '--vdk-color-light-secondary': string;
    '--vdk-color-light-tertiary': string;
    '--vdk-color-light-quaternary': string;
    '--vdk-color-walletconnectblue': string;
    '--vdk-font-family': string;
    '--vdk-font-size-medium': string;
    '--vdk-font-size-large': string;
    '--vdk-font-weight-medium': string;
    '--vdk-modal-z-index': string;
};
type ThemeVariables = keyof typeof ThemeVariables;
type CustomizedStyle = {
    [key in ThemeVariables]?: string;
};
declare const initStyles: (customizedStyle: CustomizedStyle) => void;
declare const initButton: (options: DAppKitUIOptions) => void;
declare const initModal: (options: DAppKitUIOptions) => void;
declare const initModalAndButton: (options: DAppKitUIOptions) => void;

type DAppKitUIOptions = DAppKitOptions & {
    themeMode?: ThemeMode;
    themeVariables?: CustomizedStyle;
    i18n?: I18n;
    language?: string;
    modalParent?: HTMLElement;
    onSourceClick?: (source?: SourceInfo) => void;
};
declare const DAppKitUI: {
    configure(options: DAppKitUIOptions): DAppKit;
    readonly initialized: boolean;
    readonly thor: Connex.Thor;
    readonly vendor: Connex.Vendor;
    readonly wallet: WalletManager;
    readonly configuration: DAppKitUIOptions | null;
    readonly modal: ConnectModalManager;
    get(): DAppKit;
};

declare class Button extends LitElement {
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    private setAddressFromState;
    private configureButtonUI;
    private initAddressListener;
    mode: ThemeMode;
    i18n: I18n;
    language: string;
    address: string;
    disabled: boolean;
    mobile: boolean;
    render(): TemplateResult;
}
declare global {
    interface HTMLElementTagNameMap {
        'vdk-button': Button;
    }
}

declare class ConnectButton extends LitElement {
    static styles: lit.CSSResult[];
    mode: ThemeMode;
    i18n: I18n;
    language: string;
    handleOpen: () => void;
    disabled: boolean;
    mobile: boolean;
    render(): TemplateResult;
}
declare global {
    interface HTMLElementTagNameMap {
        'vdk-connect-button': ConnectButton;
    }
}

declare class AddressButton extends LitElement {
    static styles: lit.CSSResult[];
    address?: string;
    mode: ThemeMode;
    handleOpen: () => void;
    disabled: boolean;
    mobile: boolean;
    render(): TemplateResult;
}
declare global {
    interface HTMLElementTagNameMap {
        'vdk-address-button': AddressButton;
    }
}

declare class Modal extends LitElement {
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    private setAddressFromState;
    private initAddressListener;
    address: string;
    mode: ThemeMode;
    i18n: I18n;
    language: string;
    onSourceClick?: (source?: SourceInfo) => void;
    onDisconnectClick: () => void;
    render(): TemplateResult;
}
declare global {
    interface HTMLElementTagNameMap {
        'vdk-modal': Modal;
    }
}

declare class BaseModal extends LitElement {
    static styles: lit.CSSResult;
    modalSubContainer?: Element;
    modalHeight?: number;
    open: boolean;
    mode: ThemeMode;
    observer: ResizeObserver;
    willUpdate(changedProperties: PropertyValues<this>): void;
    onClose: () => null;
    stopPropagation: (event: Event) => void;
    render(): TemplateResult;
}
declare global {
    interface HTMLElementTagNameMap {
        'vdk-base-modal': BaseModal;
    }
}

declare class ConnectModal extends LitElement {
    static styles: lit.CSSResult[];
    constructor();
    disconnectedCallback(): void;
    private get availableSources();
    private get wallet();
    onSourceClick: (source?: SourceInfo) => void;
    onClose: () => void;
    open: boolean;
    openingVeWorld: boolean;
    mode: ThemeMode;
    i18n: I18n;
    language: string;
    walletConnectQRcode?: string;
    requestForConnectionCertificate: boolean;
    waitingForTheSignature: boolean;
    private setWaitingForTheSignature;
    private renderContent;
    render(): TemplateResult;
    private handleBack;
    private handleClose;
}
declare global {
    interface HTMLElementTagNameMap {
        'vdk-connect-modal': ConnectModal;
    }
}

declare class SourceCard extends LitElement {
    static styles: lit.CSSResult[];
    onClick?: (source?: SourceInfo) => void;
    mode: ThemeMode;
    source?: SourceInfo;
    get wallet(): WalletManager;
    handleSourceClick(): void;
    render(): TemplateResult;
}
declare global {
    interface HTMLElementTagNameMap {
        'vdk-source-card': SourceCard;
    }
}

declare class WalletConnectQrCode extends LitElement {
    static styles: lit.CSSResult[];
    mode: ThemeMode;
    i18n: I18n;
    language: string;
    walletConnectQRcode?: string;
    showCopiedIcon: boolean;
    openingVeWorld: boolean;
    render(): TemplateResult | typeof nothing;
    private onCopy;
    private getVeWorld;
    private svgLoaderTemplate;
    private svgWCQrCode;
}
declare global {
    interface HTMLElementTagNameMap {
        'vdk-wallet-connect-qrcode': WalletConnectQrCode;
    }
}

declare class SignConnectionCertificate extends LitElement {
    static styles: lit.CSSResult[];
    constructor();
    mode: ThemeMode;
    i18n: I18n;
    language: string;
    waitingForTheSignature: boolean;
    setWaitingForTheSignature: (v: boolean) => void;
    submitButtonWidth: number;
    private svgLoaderTemplate;
    render(): TemplateResult | typeof nothing;
    private setSubmitButtonWidth;
    private handleSignCertificate;
}
declare global {
    interface HTMLElementTagNameMap {
        'vdk-sign-connection-certificate': SignConnectionCertificate;
    }
}

declare class AddressModal extends LitElement {
    static styles: lit.CSSResult[];
    open: boolean;
    address: string;
    onDisconnectClick?: () => void;
    mode: ThemeMode;
    i18n: I18n;
    language: string;
    walletConnectQRcode?: string;
    showCopiedIcon: boolean;
    constructor();
    disconnectedCallback(): void;
    onClose: () => void;
    render(): TemplateResult;
    private onCopy;
    private handleClose;
}
declare global {
    interface HTMLElementTagNameMap {
        'vdk-address-modal': AddressModal;
    }
}

declare class Fonts extends LitElement {
    render(): TemplateResult;
}
declare global {
    interface HTMLElementTagNameMap {
        'vdk-fonts': Fonts;
    }
}

export { ANDROID_STORE_URL, AddressButton, AddressModal, BaseModal, Breakpoint, Button, Colors, ConnectButton, ConnectModal, ConnectModalManager, ConnectModalManagerOptions, CustomWalletConnectModal, CustomizedStyle, DAppKitUI, DAppKitUIOptions, EventArgs, EventTypes, Font, Fonts, I18n, IOS_STORE_URL, Inter, Modal, QrCodeUtil, SignConnectionCertificate, SourceCard, SourceInfo, ThemeMode, ThemeVariables, VEWORLD_WEBSITE, WalletConnectQrCode, WalletSources, addResizeListeners, createModalIfNotPresent, defaultI18n, dispatchCustomEvent, friendlyAddress, getPicassoImage, initButton, initModal, initModalAndButton, initStyles, isAndroid, isMobile, modalZIndex, subscribeToCustomEvent, useTranslate };
